/* Node is defined as :
typedef struct node
{
    int val;
    struct node* left;
    struct node* right;
    int ht;
} node; */

int Heightoftree(node* root){                                                   // define the height of tree
    if(root == NULL) return -1;
    return max(Heightoftree(root->left), Heightoftree(root->right))+1;
}

void Updateheight(node* root){                                                  // update ht if there's a adjustment
    if(root){
        root->ht = max(Heightoftree(root->left), Heightoftree(root->right))+1;
    }
}

node* rotateL(node* root){                                                      // left rotation                 
    node* temp = root->right;
    root->right = temp->left;
    temp->left = root;
    Updateheight(temp);
    Updateheight(root);
    return temp;
}

node* rotateR(node* root){                                                      // right rotation
    node* temp = root->left;
    root->left = temp->right;
    temp->right = root;
    Updateheight(temp);
    Updateheight(root);
    return temp;    
}

node * insert(node * root,int val)
{
	if(root == NULL){                                                             // if there's NULL, just create a new node
        root = new node;
        root->val = val;
        root->left = root->right = NULL;
        return root;
    }
    
    if(root->val > val) root->left = insert(root->left, val);                   // if val < root value, go to left hand side or vice versa
    else if(root->val < val) root->right = insert(root->right, val);
    
    Updateheight(root);                                                         // update the new height of tree
    int bal = Heightoftree(root->left) - Heightoftree(root->right);             // check the balance of tree, AVL tree require all balance <=1 or >=-1
    
    //LL  
    if(bal >=2 && root->left->val > val){                                       // LL needs to rotate right
        root = rotateR(root);
    }
    //RR                                                                        // RR needs to rotate left
    if(bal <=-2 && root->right->val < val){
        root = rotateL(root);
    }
    //LR                                                                        // first rotate to left for subnode than rotate right
    if(bal >=2 && root->left->val < val){
        root->left = rotateL(root->left);
        root = rotateR(root);
    }
    //RL
    if(bal <=-2 && root->right->val > val){
        root->right = rotateR(root->right);
        root = rotateL(root);
    }
     
    return root;
}
